const logic = {}

/* Estas expresiones regulares se utilizan para la validaciÃ³n en el proceso de
registro de usuario en el formulario proporcionado. */
const EMAIL_REGEX = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
const USERNAME_REGEX = /^[\w-]+$/
const PASSWORD_REGEX = /^[\w-$%&=\[\]\{\}\<\>\(\)]{4,}$/

const NAME_REGEX = /^[a-zA-Z=\[\]\{\}\<\>\(\)]{1,}$/

/* La funciÃ³n `logic.registerUser` es responsable de registrar un nuevo usuario en el sistema.
Se necesita completar correctamente campos como `nombre`, `apellido`, `correo electrÃ³nico`,
`nombre de usuario`, `contraseÃ±a` y `repetir contraseÃ±a`.
De lo contrario mandara un aviso o error mediante un Feedback dentro del Form */
logic.registerUser = (name, surname, email, username, password, passwordRepeat) => {
    if (!NAME_REGEX.test(name))
        throw new ContentError('Name is not valid  â›”')

    if (!NAME_REGEX.test(surname))
        throw new ContentError('Surname is not valid  â›”')

    if (!EMAIL_REGEX.test(email))
        throw new ContentError('Email is not valid  â›”')

    if (!USERNAME_REGEX.test(username))
        throw new ContentError('Username is not valid  â›”')

    if (!PASSWORD_REGEX.test(password))
        throw new ContentError('Password is not valid  â›”')

    if (password !== passwordRepeat)
        throw new MatchError('Passwords don\'t match ðŸ˜µ')

    const user = data.findUser(user => user.email === email || user.username === username)

    if (user)
        throw new DuplicityError('User already exists â›”')

    user = {
        name: name,
        surname: surname,
        email: email,
        username: username,
        password: password
    }

    data.insertUser(user)
}

/* La funciÃ³n `logic.loginUser` es responsable de manejar el proceso de inicio de sesiÃ³n de un usuario.
Se necesita completar correctamente dos campos, "nombre de usuario" y "contraseÃ±a". AquÃ­ hay un desglose de lo que hace: */
logic.loginUser = (username, password) => {
    if (!USERNAME_REGEX.test(username))
        throw new ContentError('username is not valid â›”')

    if (!PASSWORD_REGEX.test(password))
        throw new ContentError('password is not valid â›”')

    const user = data.findUser(user => user.username === username)

    if (!user)
        throw new MatchError('user not found ðŸ”Ž')

    if (user.password !== password)
        throw new MatchError('wrong password ðŸ˜µ')

    sessionStorage.username = username
}

/* `logic.isUserLoggedIn = () => !!sessionStorage.username` es una funciÃ³n que verifica si un usuario estÃ¡
actualmente conectado. Devuelve "verdadero" si hay un valor almacenado en "sessionStorage.username",
indicando que un usuario ha iniciado sesiÃ³n.
Los dobles signos de exclamaciÃ³n `!!` se utilizan para convertir el valor
a un booleano, asegurando que la funciÃ³n devuelva "verdadero" si el usuario ha iniciado sesiÃ³n o "falso"
si el usuario no ha iniciado sesiÃ³n. */
logic.isUserLoggedIn = () => !!sessionStorage.username

/* esta funciÃ³n es responsable de cerrar la sesiÃ³n de un usuario. Cuando se llama a esta funciÃ³n, se elimina
la clave `username` del objeto `sessionStorage`, desconectando al usuario eliminando su informaciÃ³n de sesiÃ³n almacenada.
Esta acciÃ³n borra los datos de la sesiÃ³n del usuario, indicando que ya no estÃ¡n conectados. */
logic.logoutUser = () => delete sessionStorage.username

/* La funciÃ³n `logic.getUserName` recupera el nombre del usuario actualmente conectado. 1Âº encuentra el objeto de usuario
en el almacenamiento de datos cuyo nombre de usuario coincide con el nombre de usuario almacenado en el `sessionStorage`.
Luego, devuelve el nombre de ese usuario. Esta funciÃ³n es Ãºtil para mostrar el nombre del usuario que iniciÃ³ sesiÃ³n
en la interfaz de usuario o en un lugar determinado de app. */
logic.getUserName = () => {
    const user = data.findUser(user => user.username === sessionStorage.username)

    return user.name
}

/* La funciÃ³n `logic.getAllPosts` recupera todas las publicaciones del almacenamiento de datos.
Llama a la funciÃ³n `data.findPosts` con una funciÃ³n de devoluciÃ³n de llamada que siempre devuelve verdadero, recupera 
todos los mensajes. Luego, invierte el orden de las publicaciones usando el mÃ©todo "inverso" antes de regresar a ellos.
Esto garantiza que las publicaciones se muestren en orden cronolÃ³gico inverso, mÃ¡s recientes primero. */
logic.getAllPosts = () => {
    const posts = data.findPosts(() => true)

    return posts.reverse()
}

/* La funciÃ³n `logic.createPost` es responsable de crear una nueva publicaciÃ³n en el sistema, es necesario tres
parÃ¡metros: `tÃ­tulo`, `imagen` y `descripciÃ³n`. */

logic.createPost = (title, image, description) => {
    if (typeof title !== 'string' || !title.length || title.length > 50) throw new ContentError('title is not valid â›”')
    if (typeof image !== 'string' || !image.startsWith('http')) throw new ContentError('image is not valid â›”')
    if (typeof description !== 'string' || !description.length || description.length > 200) throw new ContentError('description is not valid â›”')

    const post = {
        author: sessionStorage.username,
        title,
        image,
        description,
        date: new Date().toISOString()
    }

    data.insertPost(post)
}